#ifndef lint
static char const 
yyrcsid[] = "$FreeBSD: src/usr.bin/yacc/skeleton.c,v 1.28 2000/01/17 02:04:06 bde Exp $";
#endif
#include <stdlib.h>
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define YYLEX yylex()
#define YYEMPTY -1
#define yyclearin (yychar=(YYEMPTY))
#define yyerrok (yyerrflag=0)
#define YYRECOVERING() (yyerrflag!=0)
static int yygrowstack();
#define YYPREFIX "yy"
#line 3 "c.y"
/*#define YYDEBUG 1*/
	#include <iostream>
	#include <stdio.h>
	#include <string>
	#include <set>
	#include <stdlib.h>
	#include <vector>
	#include <stdarg.h>
	#include<map>
	#include<vector>
	using namespace std;
	map<string,string>mp;
	extern set<string>st[100];
	extern vector<string>sp;
	extern int level;
	extern vector<string>sl;
	extern string tmp;	
/* prototypes */
	

	int yylex(void);
	
	void yyerror(char *s);
	int yyparse();
	string tra2(string);

#line 33 "c.y"
typedef union {
	int iValue;
	void * pAST;
	char *strName;
} YYSTYPE;
#line 50 "y.tab.c"
#define YYERRCODE 256
#define CONSTANT 257
#define STRING_LITERAL 258
#define SIZEOF 259
#define TYPENAME 260
#define PARAFUNC 261
#define PTR_OP 262
#define INC_OP 263
#define DEC_OP 264
#define LEFT_OP 265
#define RIGHT_OP 266
#define LE_OP 267
#define GE_OP 268
#define EQ_OP 269
#define NE_OP 270
#define AND_OP 271
#define OR_OP 272
#define MUL_ASSIGN 273
#define DIV_ASSIGN 274
#define MOD_ASSIGN 275
#define ADD_ASSIGN 276
#define SUB_ASSIGN 277
#define LEFT_ASSIGN 278
#define RIGHT_ASSIGN 279
#define AND_ASSIGN 280
#define XOR_ASSIGN 281
#define OR_ASSIGN 282
#define TYPE_NAME 283
#define TYPEDEF 284
#define EXTERN 285
#define STATIC 286
#define AUTO 287
#define REGISTER 288
#define RESTRICT 289
#define INLINE 290
#define CHAR 291
#define SHORT 292
#define INT 293
#define LONG 294
#define SIGNED 295
#define UNSIGNED 296
#define FLOAT 297
#define DOUBLE 298
#define CONST 299
#define VOLATILE 300
#define VOID 301
#define _BOOL 302
#define _COMPLEX 303
#define _IMAGINARY 304
#define STRUCT 305
#define UNION 306
#define ENUM 307
#define ELLIPSIS 308
#define PARALLEL 309
#define CASE 310
#define DEFAULT 311
#define IF 312
#define ELSE 313
#define SWITCH 314
#define WHILE 315
#define DO 316
#define FOR 317
#define GOTO 318
#define CONTINUE 319
#define BREAK 320
#define RETURN 321
#define IDENTIFIER 322
#define IFX 323
const short yylhs[] = {                                        -1,
    1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    3,    3,
    4,    4,    4,    4,    4,    4,    5,    5,    5,    5,
    5,    5,    6,    6,    7,    7,    7,    7,    8,    8,
    8,    9,    9,    9,   10,   10,   10,   10,   10,   11,
   11,   11,   12,   12,   13,   13,   14,   14,   15,   15,
   16,   16,   17,   17,   18,   18,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   20,   20,   21,
   22,   22,   22,   23,   23,   23,   23,   23,   23,   23,
   23,   24,   24,   25,   25,   26,   26,   26,   26,   26,
   27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   28,   28,   28,   29,   29,
   30,   30,   31,   32,   32,   32,   32,   33,   33,   34,
   34,   34,   35,   35,   35,   35,   35,   36,   36,   37,
   37,   38,   38,   38,   39,   40,   40,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   42,   42,   42,   42,   43,   43,   44,   44,   45,
   45,   46,   46,   46,   47,   47,   48,   48,   49,   49,
   49,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   51,   52,   52,   52,   53,   53,
   53,   54,   55,   55,   56,   56,   57,   57,   57,   57,
   57,   57,   58,   58,   58,   59,   59,   60,   60,   61,
   61,   62,   62,   63,   63,   63,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   65,   65,   65,   65,   65,    0,    0,   66,   66,   67,
   67,   68,   68,   72,   72,   70,   71,   71,   69,   69,
   69,   73,   73,   73,   73,
};
const short yylen[] = {                                         2,
    1,    1,    1,    3,    1,    4,    3,    4,    3,    3,
    2,    2,    6,    7,    3,    4,    6,    7,    1,    3,
    1,    2,    2,    2,    2,    4,    1,    1,    1,    1,
    1,    1,    1,    4,    1,    3,    3,    3,    1,    3,
    3,    1,    3,    3,    1,    3,    3,    3,    3,    1,
    3,    3,    1,    3,    1,    3,    1,    3,    1,    3,
    1,    3,    1,    5,    1,    3,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    3,    1,
    2,    3,    4,    1,    2,    1,    2,    1,    2,    1,
    2,    1,    3,    1,    3,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    5,    4,    2,    1,    1,
    1,    2,    3,    2,    1,    2,    1,    1,    3,    1,
    2,    3,    4,    5,    5,    6,    2,    1,    3,    1,
    3,    1,    1,    1,    1,    2,    1,    1,    3,    3,
    4,    5,    4,    6,    5,    6,    5,    4,    4,    4,
    3,    1,    2,    2,    3,    1,    2,    1,    3,    1,
    3,    2,    2,    1,    1,    3,    1,    2,    1,    1,
    2,    3,    2,    3,    3,    4,    3,    4,    4,    5,
    2,    3,    3,    4,    1,    1,    3,    4,    1,    3,
    4,    2,    1,    2,    3,    2,    1,    1,    1,    1,
    1,    1,    3,    4,    3,    2,    3,    1,    2,    1,
    1,    1,    2,    5,    7,    5,    5,    7,    6,    7,
    8,    9,    7,    8,    7,    8,    6,    7,    7,    8,
    3,    2,    2,    2,    3,    1,    2,    1,    1,    4,
    3,    1,    2,    1,    3,    1,    1,    3,    0,    1,
    3,    1,    2,    2,    3,
};
const short yydefred[] = {                                      0,
  195,   96,   97,   98,   99,  100,  144,  145,  102,  103,
  104,  105,  108,  109,  106,  107,  142,  143,  101,  110,
  111,  112,  119,  120,    0,    0,    0,  249,    0,    0,
    0,  113,    0,  114,    0,    0,  115,  246,  248,    0,
    0,    0,  247,  148,    0,    0,   81,    0,   92,    0,
    0,    0,   85,   87,    0,    0,   89,   91,    0,    0,
    0,  138,  254,    0,    0,  166,  164,    0,    0,   82,
    0,    0,  252,    0,  251,    0,    0,    0,    0,    0,
    0,    0,  121,    0,    0,    0,    0,  133,    0,    0,
   83,  149,  167,  165,   93,    0,    2,    3,    0,  256,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  216,   27,   28,   29,   30,
   31,   32,  222,    5,    0,    0,    0,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   65,   78,
    0,  220,  221,  207,  208,    0,  218,  209,  210,  211,
  212,    0,    1,    0,  196,   95,  253,  250,  175,  161,
    0,    0,    0,  170,    0,    0,  150,    0,    0,    0,
    0,  124,  117,  122,    0,    0,  128,    0,  126,  134,
    0,   33,   80,  141,  135,  139,  255,    0,   25,    0,
   22,   23,    0,    0,    0,    0,    0,    0,    0,    0,
  242,  243,  244,    0,    0,    0,    0,    0,    0,   11,
   12,    0,    0,    0,   68,   69,   70,   71,   72,   73,
   74,   75,   76,   77,   67,    0,   24,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  223,  217,  219,
    0,    0,  199,    0,    0,    0,  172,    0,  173,    0,
  159,    0,  160,    0,    0,    0,  158,  153,    0,  151,
    0,    0,  116,  131,    0,  123,    0,  136,    0,    0,
    0,  215,    0,    0,    0,    0,    0,    0,    0,  241,
  245,  213,    4,    0,    0,  178,    0,   10,    7,    0,
   19,    0,    9,   66,   36,   37,   38,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   79,   15,    0,    0,    0,    0,    0,
  262,    0,  260,  197,    0,  191,    0,    0,    0,  183,
    0,    0,    0,    0,    0,  169,  171,  176,  155,    0,
    0,  157,  152,  129,  132,    0,    0,  214,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   34,    8,
    0,    6,    0,   16,  263,  264,    0,    0,    0,    0,
    0,    0,  198,  200,    0,    0,  203,  192,  182,    0,
  185,  184,  193,    0,    0,  187,    0,    0,  154,  156,
    0,  226,  227,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   20,   64,  265,  261,    0,    0,    0,
  206,  201,  202,  204,  186,  194,    0,  189,  188,    0,
    0,  229,    0,    0,    0,    0,    0,    0,  237,    0,
    0,    0,   13,    0,   17,    0,  205,  190,  225,  228,
  230,  235,    0,  233,    0,    0,    0,  238,  239,    0,
   14,   18,  231,  236,  234,    0,  240,  232,
};
const short yydgoto[] = {                                      27,
  124,  125,  300,  126,  127,  128,  129,  130,  131,  132,
  133,  134,  135,  136,  137,  138,  139,  140,  226,  141,
  184,   28,   74,   48,   49,   30,   31,   32,   33,   82,
   83,   84,  176,  177,   34,   61,   62,   35,   36,   65,
   51,   52,   68,  337,  163,  164,  165,  208,  338,  260,
   37,  253,  254,  385,  386,  387,  143,  144,  145,  146,
  147,  148,  149,  150,  151,   38,   39,   76,  330,  152,
  332,   64,  333,
};
const short yysindex[] = {                                   2749,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -108, -279, 2749,    0,   79, 2846,
 2846,    0, -106,    0, 2846, 2846,    0,    0,    0,  -42,
 -185, -179,    0,    0,   24,   23,    0,  209,    0, 1830,
   67,  -32,    0,    0,   60, 1695,    0,    0, -185,  161,
   35,    0,    0,  245,  215,    0,    0,   23,   24,    0,
  129,  885,    0,   79,    0, 2604,  219,  730,   67, 1695,
 1695, 2677,    0,   76, 1695,   43, 1307,    0,  -75,  -59,
    0,    0,    0,    0,    0,  225,    0,    0, 1320,    0,
 1328, 1328, 1307,  221,  255,  262,  273,  636,  287,   21,
  288,  300,  -15,  309,  547,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  229,  281, 1307,    0,  282,  116,
 -217,   94,  -79,  345,  291,  275,  126,  -11,    0,    0,
  274,    0,    0,    0,    0,  337,    0,    0,    0,    0,
    0,  149,    0,  885,    0,    0,    0,    0,    0,    0,
   38,  362,  361,    0,  152,  877,    0,  316,  360,  779,
 2725,    0,    0,    0, 1307,  277,    0,  400,    0,    0,
  -34,    0,    0,    0,    0,    0,    0,  547,    0,  547,
    0,    0,  407,  636, 1307, 1307, 1307,  157,  494,  408,
    0,    0,    0,  306,  636,  363,  106,  433,  174,    0,
    0,  930, 1307,  178,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1307,    0, 1307, 1307, 1307,
 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
 1307, 1307, 1307, 1307, 1307, 1307, 1307,    0,    0,    0,
  957,  123,    0,   56, 1502,  787,    0,  -35,    0,   93,
    0, 2797,    0,  180,  390,  877,    0,    0, 1307,    0,
  437,  445,    0,    0,   76,    0, 1307,    0,  499,  523,
  636,    0,  453,  457,  487,  526,  980,  347, 1070,    0,
    0,    0,    0, 1719,   96,    0, 1024,    0,    0,  501,
    0,   30,    0,    0,    0,    0,    0,  282,  282,  116,
  116, -217, -217, -217, -217,   94,   94,  -79,  345,  291,
  275,  126,  218,    0,    0,  537,  307,  307,  123,  313,
    0,  -53,    0,    0,  444,    0,  550,  552,  244,    0,
  495,  -22,   93, 1770,  833,    0,    0,    0,    0,  506,
  525,    0,    0,    0,    0,  522,  522,    0,  636,  636,
  636, 1307, 1119,  393, 1078, 1140,  398,  885,    0,    0,
 1307,    0, 1307,    0,    0,    0,  -27,  123,  123,  610,
 1307,  338,    0,    0,  885,  311,    0,    0,    0,   17,
    0,    0,    0,  621,  244,    0,  573,  111,    0,    0,
  364,    0,    0,  538,  636,  542, 1168, 1186,  411,  636,
  564, 1217,   57,    0,    0,    0,    0,  313, 1230,  595,
    0,    0,    0,    0,    0,    0,  276,    0,    0,  636,
  637,    0,  636,  636,  565,  636,  569, 1258,    0,  636,
  636,  570,    0,  841,    0,  571,    0,    0,    0,    0,
    0,    0,  636,    0,  636,  636,  575,    0,    0,  636,
    0,    0,    0,    0,    0,  636,    0,    0,
};
const short yyrindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   13,
   18,    0,    0,    0,   86,  159,    0,    0,    0, 1376,
    0,    0,    0,    0,    0,  -28,    0,    0,    0,  417,
 1561,    0,    0,    0, 1442,    0,    0,    0,    0,   61,
    0,    0,    0,    0,    0,    0,    0,   49,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1645,    0,
  -21,    0,    0,    0,   44,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  417,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2049,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2104, 1834,    0,    0, 2161, 2209,
 2451, 1482, 2607, 2181, 1776, 2692,  968, 1110,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  620,    0,  656,    0,    0,    0,    0, 1369,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  429,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  657,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  638,    0,    0,    0,    0,    0,  626,    0,  627,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1369,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  658,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2172, 2294, 2407,
 2444, 2489, 2529, 2536, 2574, 2562, 2600, 2644, 2300, 2685,
 2723, 1331,    0,    0,    0,    0,    0,    0,  665,   -1,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  631,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2133,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  151,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  426,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   91,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,
};
const short yygindex[] = {                                      0,
    0,    0, -225,   -5,    0,   81,  315,  458,  -86,  454,
  468,  497,  491,  505,  511,    0,  -36,  -71,    0,  -82,
  -99,  404,   11,    0,  681,    0,  492,    0,    0,  680,
  -14,  414,    0,  486,    0,  705,  -16,  -46,    0,  137,
   -7,  410,  -54,  -74,    0,  503,    0,   27, -132,  -83,
    0,  -70,  399,    0,    0,  383, -102,    0,   97,    0,
  625,    0,    0,    0,    0,  747,    0,    0,  397,  561,
  448,    0,  424,
};
#define YYTABLESIZE 3153
const short yytable[] = {                                      66,
  155,  156,  162,  193,  255,  198,  169,   45,  380,   85,
   29,  162,  162,  416,   41,  162,   56,  122,  125,  125,
  125,   93,  117,  170,  115,  326,  118,  119,  259,  120,
  204,   66,  206,   85,   85,   85,  125,   29,   85,  257,
   53,   54,   42,  203,   79,   57,   58,  233,  234,  185,
  183,  246,   84,   84,   84,  256,   84,   86,   86,   86,
  257,   86,  162,   45,   46,   46,  183,  174,   85,  125,
  392,   84,  186,  247,  296,  274,   86,  255,   89,   46,
   59,  182,  155,  127,  127,  127,  181,  161,  163,  163,
  278,  282,  163,  189,  265,  191,  192,  182,  272,  335,
  444,  127,  292,   84,  140,  206,   77,  206,   86,  425,
  121,  266,  283,  284,  285,   45,  288,   46,   45,   66,
   46,  182,  372,   93,   85,   88,   88,   88,  256,   88,
  302,  258,  344,  175,  127,  294,   60,   47,  183,  163,
  301,   85,   63,   85,   88,  294,   75,   46,  312,  313,
  314,  315,  258,  237,  304,  238,  174,   78,  231,   88,
  232,  122,  329,  323,  186,   50,  117,  180,  115,  182,
  118,  119,  158,  120,  343,  324,   88,  355,  358,  301,
  334,  443,   80,  345,  341,  140,  256,  123,  251,  239,
  240,  259,  263,  446,  350,  264,  256,  351,   90,   90,
   90,  342,   90,  429,  364,   96,  367,  227,  252,   66,
   96,  343,  259,   40,  279,   55,  280,   90,  379,   93,
  178,   87,  182,  182,  182,  182,  182,  182,  182,  182,
  182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
  183,   97,   98,   99,  379,  100,   60,  101,  102,   90,
   79,   71,   69,  116,  121,   92,  401,  402,  403,  160,
  245,  247,  187,  155,  384,  161,    7,   70,  212,  394,
  257,  182,  161,  397,  214,  373,   17,   18,  194,  404,
  406,  420,  409,  411,  390,   72,   44,   60,   90,   44,
  398,  182,   66,  162,  195,   93,  155,  257,   66,  414,
  125,  196,  432,   91,  161,    7,  153,  439,  305,  306,
  307,    7,  197,  155,  422,   17,   18,  247,  230,  213,
  275,   17,   18,  228,  435,  437,  199,  449,  229,  442,
  451,  452,  248,  454,   84,  276,  415,  458,  459,   86,
  427,  225,  200,   93,  183,   44,  201,  301,   66,  247,
  463,   93,  464,  465,  161,  457,  382,  467,  202,   44,
  235,  236,  258,  468,  291,  127,  205,  182,  448,  122,
  163,  423,  155,  384,  117,  182,  115,  369,  118,  119,
   93,  120,  241,  100,  242,   97,   98,   99,    1,  100,
  247,  101,  102,  327,  328,  123,  244,   44,  243,    7,
   44,  381,  261,  293,  262,  365,  247,   88,  267,   17,
   18,  178,    2,    3,    4,    5,    6,    7,    8,    9,
   10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
   20,   21,   22,   23,   24,   25,  247,   26,  103,  104,
  105,  247,  106,  107,  108,  109,  110,  111,  112,  113,
  114,  407,  268,   73,  247,   67,  412,  277,  224,   71,
   94,  249,  121,  224,  281,  224,  290,  224,  224,  438,
  224,  286,  130,  297,  142,   94,  122,   94,    1,  157,
   90,  117,  349,  115,  224,  118,  119,  130,  120,  382,
  209,  210,  211,  359,  172,  298,  247,  360,  179,  303,
  247,  348,    2,    3,    4,    5,    6,    7,    8,    9,
   10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
   20,   21,   22,   23,   24,   25,  122,  361,  207,  352,
  247,  117,    7,  115,  381,  118,  119,  353,  120,  356,
  159,  370,   17,   18,  371,  308,  309,   81,  224,  142,
  224,  224,  287,  215,  216,  217,  218,  219,  220,  221,
  222,  223,  224,  357,    7,  362,  154,  100,  383,  121,
  258,   81,   81,   81,   17,   18,   81,  374,  431,  122,
  371,  247,  433,  378,  117,  247,  115,  391,  118,  119,
  388,  120,  389,   97,   98,   99,    1,  100,  399,  101,
  102,  207,  289,  207,  440,  453,   81,  247,  247,  455,
  460,  462,  247,  247,  371,  466,  295,  400,  247,  121,
    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,
   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
   22,   23,   24,   25,  368,   26,  103,  104,  105,  419,
  106,  107,  108,  109,  110,  111,  112,  113,  114,  421,
  174,  426,   81,  174,  258,  428,  179,  180,  122,  179,
  180,  181,  121,  117,  181,  115,  430,  118,  119,   81,
  120,   81,  224,  224,  224,  224,  224,  447,  224,  224,
  310,  311,  316,  317,  123,  450,  168,  177,  179,  259,
   97,   98,   99,  295,  100,  259,  101,  102,  318,  224,
  224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
  224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
  224,  224,  224,  320,  224,  224,  224,  224,  319,  224,
  224,  224,  224,  224,  224,  224,  224,  224,  321,   95,
   97,   98,   99,    1,  100,  322,  101,  102,   71,  171,
  354,  121,  122,   86,  347,  153,  413,  117,  424,  115,
  250,  168,  119,   43,  120,  418,  377,    2,    3,    4,
    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
   25,  417,   26,   97,   98,   99,    1,  100,    0,  101,
  102,  122,  331,    0,    0,  153,  117,    0,  115,  122,
  271,  119,  167,  120,  117,    0,  115,    0,  118,  119,
    0,  120,    0,    0,    0,    7,    0,    9,   10,   11,
   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
   22,   23,   24,   25,    0,  121,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  122,    0,    0,  153,    0,
  117,  270,  115,  122,  118,  119,    0,  120,  117,  340,
  115,    0,  118,  119,    0,  120,  382,  375,  376,  331,
    0,    0,   97,   98,   99,    0,  100,    0,  101,  102,
    0,    0,    0,    0,  121,    0,    0,    0,    0,  122,
    0,    0,  121,    0,  117,    0,  115,  122,  118,  119,
    0,  120,  117,    0,  115,  396,  118,  119,    0,  120,
    0,  381,    0,    0,    0,    0,    0,    0,  331,  331,
    0,    0,    0,    0,    0,  103,  104,  105,    0,  106,
  107,  108,  109,  110,  111,  112,  113,  114,  121,    0,
    0,    0,  122,  154,    0,  461,  121,  117,    0,  115,
  299,  118,  119,    0,  120,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   97,   98,   99,  122,
  100,    0,  101,  102,  117,    0,  115,  325,  118,  119,
    0,  120,  121,    0,    0,    0,    0,  154,   61,    0,
  121,   61,  122,    0,    0,  166,    0,  117,    7,  115,
    0,  118,  119,    0,  120,   61,   61,    0,   17,   18,
   61,    0,    0,    0,    0,   97,   98,   99,  363,  100,
    0,  101,  102,   97,   98,   99,    0,  100,    0,  101,
  102,  153,    0,    0,    0,  121,  122,    0,    0,    0,
   61,  117,    0,  115,  269,  118,  119,    7,  120,    0,
    0,    0,  339,    0,    0,    7,    0,   17,   18,    0,
    0,    0,  121,    0,    0,   17,   18,    0,    0,   97,
   98,   99,   61,  100,    0,  101,  102,   97,   98,   99,
  153,  100,  122,  101,  102,  121,    0,  117,  153,  115,
  122,  118,  119,    0,  120,  117,    0,  115,  395,  118,
  119,    7,  120,    0,    0,    0,    0,    0,  366,    0,
    0,   17,   18,   97,   98,   99,  408,  100,    0,  101,
  102,   97,   98,   99,    0,  100,  368,  101,  102,  121,
   63,  122,    0,   63,  153,    0,  117,    0,  115,  405,
  118,  119,  153,  120,    0,    7,    0,   63,   63,    0,
    0,    0,  122,    0,    0,   17,   18,  117,    0,  115,
  410,  118,  119,    0,  120,    0,   97,   98,   99,    0,
  100,    0,  101,  102,    0,  121,    0,    0,  153,    0,
  122,    0,   63,  121,    0,  117,  153,  115,  434,  118,
  119,    0,  120,   97,   98,   99,    0,  100,  122,  101,
  102,    0,    0,  117,    0,  115,  436,  118,  119,    0,
  120,    0,    0,    0,   63,    0,   97,   98,   99,   61,
  100,    0,  101,  102,  121,    0,    0,    0,    0,  122,
    0,  153,    0,    0,  117,    0,  115,  441,  118,  119,
    0,  120,  122,    0,    0,  121,    0,  117,    0,  115,
  445,  118,  119,    0,  120,    0,    0,    0,  153,    0,
   97,   98,   99,    0,  100,    0,  101,  102,    0,    0,
  122,    0,    0,  121,    0,  117,    0,  115,  456,  118,
  119,  153,  120,    0,    0,    0,    0,    0,    0,    0,
    0,  121,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   97,   98,   99,    0,
  100,    0,  101,  102,   97,   98,   99,    0,  100,  122,
  101,  102,  121,    0,  117,  153,  115,    0,  118,  119,
    0,  120,  122,    0,    0,  121,    0,  117,    0,  188,
  122,  118,  119,    0,  120,  117,    0,  190,    0,  118,
  119,   62,  120,    0,   62,   97,   98,   99,    0,  100,
    0,  101,  102,  121,    0,    0,    0,    0,   62,   62,
    0,  153,    0,   62,    0,    0,   97,   98,   99,  153,
  100,   28,  101,  102,    0,    0,   28,    0,   28,    0,
   28,   28,    0,   28,    0,  137,  137,  137,    0,  137,
    0,    0,    0,   62,   97,   98,   99,    0,  100,    0,
  101,  102,  121,  137,  137,    0,    0,    0,    0,    0,
  153,    0,   97,   98,   99,  121,  100,    0,  101,  102,
    0,    0,    0,  121,    0,   62,    0,    0,    0,    0,
    0,  153,    0,    0,    0,    0,  137,    0,    0,    0,
    0,    0,    0,   97,   98,   99,    0,  100,    0,  101,
  102,  118,  118,  118,    0,  118,   97,   98,   99,  153,
  100,    0,  101,  102,   28,    0,    0,    0,    0,  118,
  118,    0,    0,    0,    0,    0,    0,  153,    0,    0,
    0,    0,    0,    0,   97,   98,   99,    0,  100,   50,
  101,  102,   50,    0,    0,   50,    0,    0,    0,    0,
    0,    0,  118,    0,    0,    0,    0,    0,  153,   50,
   50,  255,  336,   46,   50,    0,    0,    0,    0,    0,
    0,  153,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   97,   98,   99,    0,  100,    0,  101,
  102,    0,    0,    0,   50,   50,   97,   98,   99,  153,
  100,    0,  101,  102,   97,   98,   99,    0,  100,    0,
  101,  102,  256,    0,    0,    0,    0,    0,    0,    0,
    0,  147,   62,    0,  147,   50,   50,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  147,  147,
    0,  147,    0,    0,    0,   28,   28,   28,  153,   28,
    0,   28,   28,    0,    0,  137,    0,    0,    0,    0,
    0,  153,    0,    0,    0,    0,    0,    0,    0,  153,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  137,
  137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
  137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
  137,  137,  137,  147,    0,  146,    0,    0,  146,    0,
   28,    0,    0,    0,    0,    0,    0,  137,    0,    0,
    0,  118,  146,  146,    0,  146,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  118,  118,  118,  118,  118,
  118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
  118,  118,  118,  118,  118,  118,  118,  118,  118,    0,
   50,   50,   50,   50,    0,    0,    0,    0,  294,  336,
   46,    1,    0,  118,    0,    0,    0,  146,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    2,    3,    4,    5,    6,
    7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
   17,   18,   19,   20,   21,   22,   23,   24,   25,  256,
  393,    0,    0,    0,    0,    0,   57,    0,    0,   57,
  147,    0,    0,   44,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   57,   57,    0,    0,    0,   57,    0,
    0,    0,    0,    0,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,   57,  147,
   33,   33,    0,    0,   33,   33,   33,   33,   33,    0,
   33,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   72,   33,   33,   33,    0,   33,   33,    0,    0,   57,
   57,    0,    0,    0,  146,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   33,   33,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,   71,  146,    1,    0,    0,   33,   33,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,
    0,    0,    0,    7,    0,    9,   10,   11,   12,   13,
   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
   24,   25,    2,    3,    4,    5,    6,    7,    8,    9,
   10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
   20,   21,   22,   23,   24,   25,    0,    0,    0,    1,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   57,   57,    0,    0,
    0,    0,    0,    2,    3,    4,    5,    6,    7,    8,
    9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
   19,   20,   21,   22,   23,   24,   25,    0,    0,    0,
    0,    0,    0,    0,    0,    1,    1,    0,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    0,   33,   33,
   33,   33,   33,   33,   33,   33,    0,    1,    1,    1,
    1,    1,    0,    2,    3,    4,    5,    6,    7,    8,
    9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
   19,   20,   21,   22,   23,   24,   25,    0,   26,    1,
   21,   21,    1,    0,   21,   21,   21,   21,   21,    0,
   21,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   21,   21,   21,   21,   21,   21,    0,    0,   26,
   26,    0,    1,   26,   26,   26,   26,   26,    0,   26,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   26,   26,   26,   26,   26,   26,   21,   21,   39,    0,
    0,   39,    0,   39,   39,   39,    0,    0,    0,   40,
    0,    0,   40,    0,   40,   40,   40,    0,   39,   39,
   39,   55,   39,   39,   55,   26,   26,   21,   21,   40,
   40,   40,    0,   40,   40,    0,    0,    0,   55,   55,
    0,    0,    0,   55,    0,    0,   42,    0,    0,   42,
    0,    0,   42,   39,   39,    0,   26,   26,    0,    0,
    0,    0,    0,    0,   40,   40,   42,   42,   42,    0,
   42,   42,    0,   55,   55,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   39,   39,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   40,   40,    0,    0,    0,
    0,   42,   42,    0,   55,   55,    0,    0,    0,    0,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,   41,   42,   42,   41,    0,   41,   41,   41,    0,
   56,    0,    0,   56,    0,    0,    0,    0,    0,    0,
    0,   41,   41,   41,    0,   41,   41,   56,   56,    0,
    0,    0,   56,    0,    0,    0,    0,    0,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   41,   41,    0,    0,
    0,    0,   56,   56,    0,    0,    0,   26,   26,   26,
   26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   26,    0,    0,   41,   41,    0,
    0,    0,    0,   56,   56,   39,   39,   39,   39,   39,
   39,   39,   39,    0,    0,    0,   40,   40,   40,   40,
   40,   40,   40,   40,   43,    0,    0,   43,    0,    0,
   43,   55,   55,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   43,   43,   43,    0,   43,   43,
    0,    0,    0,   42,   42,   42,   42,   42,   42,   42,
   42,   44,    0,    0,   44,    0,    0,   44,   45,    0,
    0,   45,    0,    0,   45,    0,    0,    0,    0,   43,
   43,   44,   44,   44,    0,   44,   44,    0,   45,   45,
   45,    0,   45,   45,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   48,    0,    0,   48,
   43,   43,   48,    0,    0,    0,   44,   44,    0,    0,
    0,    0,    0,   45,   45,    0,   48,   48,   48,    0,
   48,   48,    0,    0,    0,    0,    0,    0,   41,   41,
   41,   41,   41,   41,   41,   41,   49,   44,   44,   49,
   56,   56,   49,   46,   45,   45,   46,    0,    0,   46,
    0,   48,   48,    0,    0,    0,   49,   49,   49,    0,
   49,   49,    0,   46,   46,   46,    0,   46,   46,   51,
    0,    0,   51,    0,    0,   51,    0,    0,    0,    0,
    0,   47,   48,   48,   47,    0,    0,   47,    0,   51,
   51,   49,   49,    0,   51,    0,    0,    0,   46,   46,
    0,   47,   47,   47,    0,   47,   47,   52,    0,    0,
   52,    0,    0,   52,   53,    0,    0,   53,    0,    0,
   53,    0,   49,   49,   51,   51,    0,   52,   52,   46,
   46,    0,   52,    0,   53,   53,   47,   47,    0,   53,
    0,   43,   43,   43,   43,   43,   43,   43,   43,    0,
    0,   54,    0,    0,   54,   51,   51,   54,    0,    0,
    0,    0,   52,   52,    0,    0,    0,   47,   47,   53,
   53,   54,   54,    0,    0,    0,   54,    0,   44,   44,
   44,   44,   44,   44,   44,   44,    0,   45,   45,   45,
   45,   45,   45,   52,   52,   58,   71,    0,   58,    0,
   53,   53,   59,    0,    0,   59,   54,   54,    0,    0,
    0,    0,   58,   58,    0,    0,    0,   58,    0,   59,
   59,    0,    0,    0,   59,   48,   48,   48,   48,   48,
   48,    0,    0,   60,    0,    0,   60,   54,   54,    0,
    0,    0,    0,    0,    0,    0,    0,   58,    0,    0,
   60,   60,    0,    0,   59,   60,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   49,   49,   49,   49,   49,
   49,  173,   46,   46,   46,   46,   46,   46,   58,   58,
    0,    0,    0,    0,    0,   60,   59,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   51,   51,   51,   51,    0,    0,    0,    0,    0,    0,
   47,   47,   47,   47,   47,   47,    0,   60,    0,  273,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    1,    0,    0,    0,    0,   52,   52,
   52,   52,    0,    0,    0,    0,    0,   53,   53,    0,
    0,    0,    0,    0,    0,    0,    0,    2,    3,    4,
    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
   25,    0,   26,    0,   54,   54,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   58,   58,    0,    0,    0,
    0,    0,   59,   59,    0,    7,    0,    9,   10,   11,
   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
   22,   23,   24,   25,    1,    0,    0,    0,    0,    0,
    0,    0,    0,   60,   60,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,
    0,    0,    0,    7,    0,    9,   10,   11,   12,   13,
   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
   24,   25,    2,    3,    4,    5,    6,    7,    8,    9,
   10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
   20,   21,   22,   23,   24,   25,    1,   26,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,
   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
   22,   23,   24,   25,  346,    1,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    2,
    3,    4,    5,    6,    7,    8,    9,   10,   11,   12,
   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
   23,   24,   25,
};
const short yycheck[] = {                                      46,
   72,   72,   77,  103,   40,  108,   78,   40,   62,   56,
    0,   40,   41,   41,  123,   44,  123,   33,   40,   41,
   42,   68,   38,   78,   40,  251,   42,   43,  161,   45,
  113,   78,  115,   80,   81,   82,   58,   27,   85,   41,
   30,   31,  322,   59,   52,   35,   36,  265,  266,  125,
   87,   63,   40,   41,   42,   91,   44,   40,   41,   42,
   62,   44,   91,   40,   42,   42,  103,   82,  115,   91,
   93,   59,   89,   44,  207,  175,   59,   40,   44,   42,
  123,   87,  154,   40,   41,   42,   44,   77,   40,   41,
  125,  194,   44,   99,  166,  101,  102,  103,  170,   44,
   44,   58,  205,   91,   44,  188,   40,  190,   91,   93,
  126,  166,  195,  196,  197,   40,  199,   42,   40,  166,
   42,  127,   93,  170,  171,   40,   41,   42,   91,   44,
  213,   41,   40,   58,   91,   40,  322,   59,  175,   91,
  212,  188,  322,  190,   59,   40,   50,   42,  235,  236,
  237,  238,   62,   60,  226,   62,  171,   91,   43,  125,
   45,   33,   40,  246,  181,   29,   38,  125,   40,  175,
   42,   43,   76,   45,  258,  247,   91,  277,  281,  251,
  125,  125,  123,   91,  256,  125,   91,   59,   40,  269,
  270,   41,   41,  419,  266,   44,   91,  269,   40,   41,
   42,  256,   44,   93,  287,   69,  289,  127,   60,  256,
   74,  295,   62,  322,  188,  322,  190,   59,  272,  266,
   84,   61,  228,  229,  230,  231,  232,  233,  234,  235,
  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
  277,  257,  258,  259,  272,  261,  322,  263,  264,   91,
  258,  123,   44,  125,  126,   41,  359,  360,  361,   41,
  272,   44,  322,  335,  335,  255,  289,   59,   40,  344,
  272,  277,  262,  345,   46,   58,  299,  300,   58,  362,
  363,  381,  365,  366,  339,   61,  322,  322,   44,  322,
  345,  297,  339,  322,   40,  342,  368,  161,  345,  371,
  322,   40,  405,   59,  294,  289,  322,  410,  228,  229,
  230,  289,   40,  385,  385,  299,  300,   44,   37,   91,
   44,  299,  300,   42,  407,  408,   40,  430,   47,  412,
  433,  434,   59,  436,  322,   59,  373,  440,  441,  322,
  395,   61,  322,  390,  381,  322,   59,  419,  395,   44,
  453,  398,  455,  456,  344,  438,   46,  460,   59,  322,
  267,  268,  272,  466,   59,  322,   58,  373,   93,   33,
  322,   61,  444,  444,   38,  381,   40,  297,   42,   43,
  427,   45,   38,  261,   94,  257,  258,  259,  260,  261,
   44,  263,  264,  271,  272,   59,  271,  322,  124,  289,
  322,   91,   41,   41,   44,   59,   44,  322,   93,  299,
  300,  275,  284,  285,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   44,  309,  310,  311,
  312,   44,  314,  315,  316,  317,  318,  319,  320,  321,
  322,   59,   93,   50,   44,   46,   59,   58,   33,  123,
   44,  125,  126,   38,   58,   40,   59,   42,   43,   59,
   45,  315,   44,   41,   71,   59,   33,   68,  260,   76,
  322,   38,   93,   40,   59,   42,   43,   59,   45,   46,
  262,  263,  264,   41,   81,  322,   44,   41,   85,  322,
   44,  322,  284,  285,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   33,   41,  115,   93,
   44,   38,  289,   40,   91,   42,   43,   93,   45,   41,
  322,   41,  299,  300,   44,  231,  232,   56,  123,  146,
  125,  126,   59,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  282,   41,  289,   40,  123,  261,  125,  126,
  161,   80,   81,   82,  299,  300,   85,   41,   41,   33,
   44,   44,   41,  271,   38,   44,   40,   93,   42,   43,
   41,   45,   41,  257,  258,  259,  260,  261,   93,  263,
  264,  188,  199,  190,   41,   41,  115,   44,   44,   41,
   41,   41,   44,   44,   44,   41,  207,   93,   44,  126,
  284,  285,  286,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  123,  309,  310,  311,  312,   40,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  322,
   41,   41,  171,   44,  255,   93,   41,   41,   33,   44,
   44,   41,  126,   38,   44,   40,  313,   42,   43,  188,
   45,  190,  257,  258,  259,  260,  261,   93,  263,  264,
  233,  234,  239,  240,   59,   59,   41,   41,   41,   62,
  257,  258,  259,  294,  261,   41,  263,  264,  241,  284,
  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  243,  309,  310,  311,  312,  242,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  244,   69,
  257,  258,  259,  260,  261,  245,  263,  264,  123,   80,
  275,  126,   33,   59,  262,  322,  368,   38,  386,   40,
  146,   42,   43,   27,   45,  379,  329,  284,  285,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  378,  309,  257,  258,  259,  260,  261,   -1,  263,
  264,   33,  252,   -1,   -1,  322,   38,   -1,   40,   33,
   42,   43,   93,   45,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   -1,   -1,   -1,  289,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,  322,   -1,
   38,   93,   40,   33,   42,   43,   -1,   45,   38,   93,
   40,   -1,   42,   43,   -1,   45,   46,  327,  328,  329,
   -1,   -1,  257,  258,  259,   -1,  261,   -1,  263,  264,
   -1,   -1,   -1,   -1,  126,   -1,   -1,   -1,   -1,   33,
   -1,   -1,  126,   -1,   38,   -1,   40,   33,   42,   43,
   -1,   45,   38,   -1,   40,   93,   42,   43,   -1,   45,
   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,  378,  379,
   -1,   -1,   -1,   -1,   -1,  310,  311,  312,   -1,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  126,   -1,
   -1,   -1,   33,  123,   -1,  125,  126,   38,   -1,   40,
   41,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,   33,
  261,   -1,  263,  264,   38,   -1,   40,   41,   42,   43,
   -1,   45,  126,   -1,   -1,   -1,   -1,  123,   41,   -1,
  126,   44,   33,   -1,   -1,  286,   -1,   38,  289,   40,
   -1,   42,   43,   -1,   45,   58,   59,   -1,  299,  300,
   63,   -1,   -1,   -1,   -1,  257,  258,  259,   59,  261,
   -1,  263,  264,  257,  258,  259,   -1,  261,   -1,  263,
  264,  322,   -1,   -1,   -1,  126,   33,   -1,   -1,   -1,
   93,   38,   -1,   40,  286,   42,   43,  289,   45,   -1,
   -1,   -1,  286,   -1,   -1,  289,   -1,  299,  300,   -1,
   -1,   -1,  126,   -1,   -1,  299,  300,   -1,   -1,  257,
  258,  259,  125,  261,   -1,  263,  264,  257,  258,  259,
  322,  261,   33,  263,  264,  126,   -1,   38,  322,   40,
   33,   42,   43,   -1,   45,   38,   -1,   40,  286,   42,
   43,  289,   45,   -1,   -1,   -1,   -1,   -1,   59,   -1,
   -1,  299,  300,  257,  258,  259,   59,  261,   -1,  263,
  264,  257,  258,  259,   -1,  261,  123,  263,  264,  126,
   41,   33,   -1,   44,  322,   -1,   38,   -1,   40,   41,
   42,   43,  322,   45,   -1,  289,   -1,   58,   59,   -1,
   -1,   -1,   33,   -1,   -1,  299,  300,   38,   -1,   40,
   41,   42,   43,   -1,   45,   -1,  257,  258,  259,   -1,
  261,   -1,  263,  264,   -1,  126,   -1,   -1,  322,   -1,
   33,   -1,   93,  126,   -1,   38,  322,   40,   41,   42,
   43,   -1,   45,  257,  258,  259,   -1,  261,   33,  263,
  264,   -1,   -1,   38,   -1,   40,   41,   42,   43,   -1,
   45,   -1,   -1,   -1,  125,   -1,  257,  258,  259,  272,
  261,   -1,  263,  264,  126,   -1,   -1,   -1,   -1,   33,
   -1,  322,   -1,   -1,   38,   -1,   40,   41,   42,   43,
   -1,   45,   33,   -1,   -1,  126,   -1,   38,   -1,   40,
   41,   42,   43,   -1,   45,   -1,   -1,   -1,  322,   -1,
  257,  258,  259,   -1,  261,   -1,  263,  264,   -1,   -1,
   33,   -1,   -1,  126,   -1,   38,   -1,   40,   41,   42,
   43,  322,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,   -1,
  261,   -1,  263,  264,  257,  258,  259,   -1,  261,   33,
  263,  264,  126,   -1,   38,  322,   40,   -1,   42,   43,
   -1,   45,   33,   -1,   -1,  126,   -1,   38,   -1,   40,
   33,   42,   43,   -1,   45,   38,   -1,   40,   -1,   42,
   43,   41,   45,   -1,   44,  257,  258,  259,   -1,  261,
   -1,  263,  264,  126,   -1,   -1,   -1,   -1,   58,   59,
   -1,  322,   -1,   63,   -1,   -1,  257,  258,  259,  322,
  261,   33,  263,  264,   -1,   -1,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   -1,   40,   41,   42,   -1,   44,
   -1,   -1,   -1,   93,  257,  258,  259,   -1,  261,   -1,
  263,  264,  126,   58,   59,   -1,   -1,   -1,   -1,   -1,
  322,   -1,  257,  258,  259,  126,  261,   -1,  263,  264,
   -1,   -1,   -1,  126,   -1,  125,   -1,   -1,   -1,   -1,
   -1,  322,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,   -1,  261,   -1,  263,
  264,   40,   41,   42,   -1,   44,  257,  258,  259,  322,
  261,   -1,  263,  264,  126,   -1,   -1,   -1,   -1,   58,
   59,   -1,   -1,   -1,   -1,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,   -1,  261,   38,
  263,  264,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   -1,   -1,   -1,  322,   58,
   59,   40,   41,   42,   63,   -1,   -1,   -1,   -1,   -1,
   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,   -1,  261,   -1,  263,
  264,   -1,   -1,   -1,   93,   94,  257,  258,  259,  322,
  261,   -1,  263,  264,  257,  258,  259,   -1,  261,   -1,
  263,  264,   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   41,  272,   -1,   44,  124,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   -1,   61,   -1,   -1,   -1,  257,  258,  259,  322,  261,
   -1,  263,  264,   -1,   -1,  260,   -1,   -1,   -1,   -1,
   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,
  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  123,   -1,   41,   -1,   -1,   44,   -1,
  322,   -1,   -1,   -1,   -1,   -1,   -1,  322,   -1,   -1,
   -1,  260,   58,   59,   -1,   61,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
  269,  270,  271,  272,   -1,   -1,   -1,   -1,   40,   41,
   42,  260,   -1,  322,   -1,   -1,   -1,  123,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   91,
   41,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,
  260,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,
   -1,   -1,   -1,   -1,  284,  285,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   93,  309,
   37,   38,   -1,   -1,   41,   42,   43,   44,   45,   -1,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   61,   58,   59,   60,   -1,   62,   63,   -1,   -1,  124,
  125,   -1,   -1,   -1,  260,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,  284,  285,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  123,  309,  260,   -1,   -1,  124,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,   -1,
   -1,   -1,   -1,  289,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  284,  285,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,   -1,  260,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  271,  272,   -1,   -1,
   -1,   -1,   -1,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,  260,
   42,   43,   44,   45,   46,   47,   -1,   -1,  265,  266,
  267,  268,  269,  270,  271,  272,   -1,   59,   60,   61,
   62,   63,   -1,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,  309,   91,
   37,   38,   94,   -1,   41,   42,   43,   44,   45,   -1,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   60,   61,   62,   63,   -1,   -1,   37,
   38,   -1,  124,   41,   42,   43,   44,   45,   -1,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   59,   60,   61,   62,   63,   93,   94,   38,   -1,
   -1,   41,   -1,   43,   44,   45,   -1,   -1,   -1,   38,
   -1,   -1,   41,   -1,   43,   44,   45,   -1,   58,   59,
   60,   41,   62,   63,   44,   93,   94,  124,  125,   58,
   59,   60,   -1,   62,   63,   -1,   -1,   -1,   58,   59,
   -1,   -1,   -1,   63,   -1,   -1,   38,   -1,   -1,   41,
   -1,   -1,   44,   93,   94,   -1,  124,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   94,   58,   59,   60,   -1,
   62,   63,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,
   -1,   93,   94,   -1,  124,  125,   -1,   -1,   -1,   -1,
  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,
  282,   38,  124,  125,   41,   -1,   43,   44,   45,   -1,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   60,   -1,   62,   63,   58,   59,   -1,
   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  279,  280,  281,  282,   93,   94,   -1,   -1,
   -1,   -1,   93,   94,   -1,   -1,   -1,  265,  266,  267,
  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  280,  281,  282,   -1,   -1,  124,  125,   -1,
   -1,   -1,   -1,  124,  125,  265,  266,  267,  268,  269,
  270,  271,  272,   -1,   -1,   -1,  265,  266,  267,  268,
  269,  270,  271,  272,   38,   -1,   -1,   41,   -1,   -1,
   44,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   60,   -1,   62,   63,
   -1,   -1,   -1,  265,  266,  267,  268,  269,  270,  271,
  272,   38,   -1,   -1,   41,   -1,   -1,   44,   38,   -1,
   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   93,
   94,   58,   59,   60,   -1,   62,   63,   -1,   58,   59,
   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,
  124,  125,   44,   -1,   -1,   -1,   93,   94,   -1,   -1,
   -1,   -1,   -1,   93,   94,   -1,   58,   59,   60,   -1,
   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,  265,  266,
  267,  268,  269,  270,  271,  272,   38,  124,  125,   41,
  271,  272,   44,   38,  124,  125,   41,   -1,   -1,   44,
   -1,   93,   94,   -1,   -1,   -1,   58,   59,   60,   -1,
   62,   63,   -1,   58,   59,   60,   -1,   62,   63,   38,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   38,  124,  125,   41,   -1,   -1,   44,   -1,   58,
   59,   93,   94,   -1,   63,   -1,   -1,   -1,   93,   94,
   -1,   58,   59,   60,   -1,   62,   63,   38,   -1,   -1,
   41,   -1,   -1,   44,   38,   -1,   -1,   41,   -1,   -1,
   44,   -1,  124,  125,   93,   94,   -1,   58,   59,  124,
  125,   -1,   63,   -1,   58,   59,   93,   94,   -1,   63,
   -1,  265,  266,  267,  268,  269,  270,  271,  272,   -1,
   -1,   38,   -1,   -1,   41,  124,  125,   44,   -1,   -1,
   -1,   -1,   93,   94,   -1,   -1,   -1,  124,  125,   93,
   94,   58,   59,   -1,   -1,   -1,   63,   -1,  265,  266,
  267,  268,  269,  270,  271,  272,   -1,  267,  268,  269,
  270,  271,  272,  124,  125,   41,  123,   -1,   44,   -1,
  124,  125,   41,   -1,   -1,   44,   93,   94,   -1,   -1,
   -1,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,   58,
   59,   -1,   -1,   -1,   63,  267,  268,  269,  270,  271,
  272,   -1,   -1,   41,   -1,   -1,   44,  124,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,
   58,   59,   -1,   -1,   93,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  267,  268,  269,  270,  271,
  272,  125,  267,  268,  269,  270,  271,  272,  124,  125,
   -1,   -1,   -1,   -1,   -1,   93,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  269,  270,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
  267,  268,  269,  270,  271,  272,   -1,  125,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  260,   -1,   -1,   -1,   -1,  269,  270,
  271,  272,   -1,   -1,   -1,   -1,   -1,  271,  272,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,  285,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,  309,   -1,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  260,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,
   -1,   -1,  271,  272,   -1,  289,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  260,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,   -1,
   -1,   -1,   -1,  289,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  284,  285,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  260,  309,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  284,  285,  286,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  260,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,
  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,
};
#define YYFINAL 27
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 323
#if YYDEBUG
const char * const yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"CONSTANT",
"STRING_LITERAL","SIZEOF","TYPENAME","PARAFUNC","PTR_OP","INC_OP","DEC_OP",
"LEFT_OP","RIGHT_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP","OR_OP",
"MUL_ASSIGN","DIV_ASSIGN","MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN",
"RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","TYPE_NAME","TYPEDEF",
"EXTERN","STATIC","AUTO","REGISTER","RESTRICT","INLINE","CHAR","SHORT","INT",
"LONG","SIGNED","UNSIGNED","FLOAT","DOUBLE","CONST","VOLATILE","VOID","_BOOL",
"_COMPLEX","_IMAGINARY","STRUCT","UNION","ENUM","ELLIPSIS","PARALLEL","CASE",
"DEFAULT","IF","ELSE","SWITCH","WHILE","DO","FOR","GOTO","CONTINUE","BREAK",
"RETURN","IDENTIFIER","IFX",
};
const char * const yyrule[] = {
"$accept : translation_unit",
"primary_expression : IDENTIFIER",
"primary_expression : CONSTANT",
"primary_expression : STRING_LITERAL",
"primary_expression : '(' expression ')'",
"postfix_expression : primary_expression",
"postfix_expression : postfix_expression '[' expression ']'",
"postfix_expression : postfix_expression '(' ')'",
"postfix_expression : postfix_expression '(' argument_expression_list ')'",
"postfix_expression : postfix_expression '.' IDENTIFIER",
"postfix_expression : postfix_expression PTR_OP IDENTIFIER",
"postfix_expression : postfix_expression INC_OP",
"postfix_expression : postfix_expression DEC_OP",
"postfix_expression : '(' type_name ')' '{' initializer_list '}'",
"postfix_expression : '(' type_name ')' '{' initializer_list ',' '}'",
"postfix_expression : parallel_function '(' ')'",
"postfix_expression : parallel_function '(' argument_expression_list ')'",
"postfix_expression : parallel_function '<' boolean_expression '>' '(' ')'",
"postfix_expression : parallel_function '<' boolean_expression '>' '(' argument_expression_list ')'",
"argument_expression_list : assignment_expression",
"argument_expression_list : argument_expression_list ',' assignment_expression",
"unary_expression : postfix_expression",
"unary_expression : INC_OP unary_expression",
"unary_expression : DEC_OP unary_expression",
"unary_expression : unary_operator cast_expression",
"unary_expression : SIZEOF unary_expression",
"unary_expression : SIZEOF '(' type_name ')'",
"unary_operator : '&'",
"unary_operator : '*'",
"unary_operator : '+'",
"unary_operator : '-'",
"unary_operator : '~'",
"unary_operator : '!'",
"cast_expression : unary_expression",
"cast_expression : '(' type_name ')' cast_expression",
"multiplicative_expression : cast_expression",
"multiplicative_expression : multiplicative_expression '*' cast_expression",
"multiplicative_expression : multiplicative_expression '/' cast_expression",
"multiplicative_expression : multiplicative_expression '%' cast_expression",
"additive_expression : multiplicative_expression",
"additive_expression : additive_expression '+' multiplicative_expression",
"additive_expression : additive_expression '-' multiplicative_expression",
"shift_expression : additive_expression",
"shift_expression : shift_expression LEFT_OP additive_expression",
"shift_expression : shift_expression RIGHT_OP additive_expression",
"relational_expression : shift_expression",
"relational_expression : relational_expression '<' shift_expression",
"relational_expression : relational_expression '>' shift_expression",
"relational_expression : relational_expression LE_OP shift_expression",
"relational_expression : relational_expression GE_OP shift_expression",
"equality_expression : relational_expression",
"equality_expression : equality_expression EQ_OP relational_expression",
"equality_expression : equality_expression NE_OP relational_expression",
"and_expression : equality_expression",
"and_expression : and_expression '&' equality_expression",
"exclusive_or_expression : and_expression",
"exclusive_or_expression : exclusive_or_expression '^' and_expression",
"inclusive_or_expression : exclusive_or_expression",
"inclusive_or_expression : inclusive_or_expression '|' exclusive_or_expression",
"logical_and_expression : inclusive_or_expression",
"logical_and_expression : logical_and_expression AND_OP inclusive_or_expression",
"logical_or_expression : logical_and_expression",
"logical_or_expression : logical_or_expression OR_OP logical_and_expression",
"conditional_expression : logical_or_expression",
"conditional_expression : logical_or_expression '?' expression ':' conditional_expression",
"assignment_expression : conditional_expression",
"assignment_expression : unary_expression assignment_operator assignment_expression",
"assignment_operator : '='",
"assignment_operator : MUL_ASSIGN",
"assignment_operator : DIV_ASSIGN",
"assignment_operator : MOD_ASSIGN",
"assignment_operator : ADD_ASSIGN",
"assignment_operator : SUB_ASSIGN",
"assignment_operator : LEFT_ASSIGN",
"assignment_operator : RIGHT_ASSIGN",
"assignment_operator : AND_ASSIGN",
"assignment_operator : XOR_ASSIGN",
"assignment_operator : OR_ASSIGN",
"expression : assignment_expression",
"expression : expression ',' assignment_expression",
"constant_expression : conditional_expression",
"declaration : declaration_specifiers ';'",
"declaration : declaration_specifiers init_declarator_list ';'",
"declaration : PARALLEL IDENTIFIER parallel_function_list ';'",
"declaration_specifiers : storage_class_specifier",
"declaration_specifiers : storage_class_specifier declaration_specifiers",
"declaration_specifiers : type_specifier",
"declaration_specifiers : type_specifier declaration_specifiers",
"declaration_specifiers : type_qualifier",
"declaration_specifiers : type_qualifier declaration_specifiers",
"declaration_specifiers : function_specifier",
"declaration_specifiers : function_specifier declaration_specifiers",
"init_declarator_list : init_declarator",
"init_declarator_list : init_declarator_list ',' init_declarator",
"init_declarator : declarator",
"init_declarator : declarator '=' initializer",
"storage_class_specifier : TYPEDEF",
"storage_class_specifier : EXTERN",
"storage_class_specifier : STATIC",
"storage_class_specifier : AUTO",
"storage_class_specifier : REGISTER",
"type_specifier : VOID",
"type_specifier : CHAR",
"type_specifier : SHORT",
"type_specifier : INT",
"type_specifier : LONG",
"type_specifier : FLOAT",
"type_specifier : DOUBLE",
"type_specifier : SIGNED",
"type_specifier : UNSIGNED",
"type_specifier : _BOOL",
"type_specifier : _COMPLEX",
"type_specifier : _IMAGINARY",
"type_specifier : struct_or_union_specifier",
"type_specifier : enum_specifier",
"type_specifier : typedef_name",
"struct_or_union_specifier : struct_or_union IDENTIFIER '{' struct_declaration_list '}'",
"struct_or_union_specifier : struct_or_union '{' struct_declaration_list '}'",
"struct_or_union_specifier : struct_or_union IDENTIFIER",
"struct_or_union : STRUCT",
"struct_or_union : UNION",
"struct_declaration_list : struct_declaration",
"struct_declaration_list : struct_declaration_list struct_declaration",
"struct_declaration : specifier_qualifier_list struct_declarator_list ';'",
"specifier_qualifier_list : type_specifier specifier_qualifier_list",
"specifier_qualifier_list : type_specifier",
"specifier_qualifier_list : type_qualifier specifier_qualifier_list",
"specifier_qualifier_list : type_qualifier",
"struct_declarator_list : struct_declarator",
"struct_declarator_list : struct_declarator_list ',' struct_declarator",
"struct_declarator : declarator",
"struct_declarator : ':' constant_expression",
"struct_declarator : declarator ':' constant_expression",
"enum_specifier : ENUM '{' enumerator_list '}'",
"enum_specifier : ENUM IDENTIFIER '{' enumerator_list '}'",
"enum_specifier : ENUM '{' enumerator_list ',' '}'",
"enum_specifier : ENUM IDENTIFIER '{' enumerator_list ',' '}'",
"enum_specifier : ENUM IDENTIFIER",
"enumerator_list : enumerator",
"enumerator_list : enumerator_list ',' enumerator",
"enumerator : IDENTIFIER",
"enumerator : IDENTIFIER '=' constant_expression",
"type_qualifier : CONST",
"type_qualifier : VOLATILE",
"type_qualifier : RESTRICT",
"function_specifier : INLINE",
"declarator : pointer direct_declarator",
"declarator : direct_declarator",
"direct_declarator : IDENTIFIER",
"direct_declarator : '(' declarator ')'",
"direct_declarator : direct_declarator '[' ']'",
"direct_declarator : direct_declarator '[' type_qualifier_list ']'",
"direct_declarator : direct_declarator '[' type_qualifier_list assignment_expression ']'",
"direct_declarator : direct_declarator '[' assignment_expression ']'",
"direct_declarator : direct_declarator '[' STATIC type_qualifier_list assignment_expression ']'",
"direct_declarator : direct_declarator '[' STATIC assignment_expression ']'",
"direct_declarator : direct_declarator '[' type_qualifier_list STATIC assignment_expression ']'",
"direct_declarator : direct_declarator '[' type_qualifier_list '*' ']'",
"direct_declarator : direct_declarator '[' '*' ']'",
"direct_declarator : direct_declarator '(' parameter_type_list ')'",
"direct_declarator : direct_declarator '(' identifier_list ')'",
"direct_declarator : direct_declarator '(' ')'",
"pointer : '*'",
"pointer : '*' type_qualifier_list",
"pointer : '*' pointer",
"pointer : '*' type_qualifier_list pointer",
"type_qualifier_list : type_qualifier",
"type_qualifier_list : type_qualifier_list type_qualifier",
"parameter_type_list : parameter_list",
"parameter_type_list : parameter_list ',' ELLIPSIS",
"parameter_list : parameter_declaration",
"parameter_list : parameter_list ',' parameter_declaration",
"parameter_declaration : declaration_specifiers declarator",
"parameter_declaration : declaration_specifiers abstract_declarator",
"parameter_declaration : declaration_specifiers",
"identifier_list : IDENTIFIER",
"identifier_list : identifier_list ',' IDENTIFIER",
"type_name : specifier_qualifier_list",
"type_name : specifier_qualifier_list abstract_declarator",
"abstract_declarator : pointer",
"abstract_declarator : direct_abstract_declarator",
"abstract_declarator : pointer direct_abstract_declarator",
"direct_abstract_declarator : '(' abstract_declarator ')'",
"direct_abstract_declarator : '[' ']'",
"direct_abstract_declarator : '[' type_qualifier_list ']'",
"direct_abstract_declarator : '[' assignment_expression ']'",
"direct_abstract_declarator : '[' STATIC type_qualifier_list ']'",
"direct_abstract_declarator : direct_abstract_declarator '[' ']'",
"direct_abstract_declarator : direct_abstract_declarator '[' type_qualifier_list ']'",
"direct_abstract_declarator : direct_abstract_declarator '[' assignment_expression ']'",
"direct_abstract_declarator : direct_abstract_declarator '[' STATIC type_qualifier_list ']'",
"direct_abstract_declarator : '(' ')'",
"direct_abstract_declarator : '(' parameter_type_list ')'",
"direct_abstract_declarator : direct_abstract_declarator '(' ')'",
"direct_abstract_declarator : direct_abstract_declarator '(' parameter_type_list ')'",
"typedef_name : TYPENAME",
"initializer : assignment_expression",
"initializer : '{' initializer_list '}'",
"initializer : '{' initializer_list ',' '}'",
"initializer_list : initializer",
"initializer_list : initializer_list ',' initializer",
"initializer_list : initializer_list ',' designation initializer",
"designation : designator_list '='",
"designator_list : designator",
"designator_list : designator_list designator",
"designator : '[' constant_expression ']'",
"designator : '.' IDENTIFIER",
"statement : labeled_statement",
"statement : compound_statement",
"statement : expression_statement",
"statement : selection_statement",
"statement : iteration_statement",
"statement : jump_statement",
"labeled_statement : IDENTIFIER ':' statement",
"labeled_statement : CASE constant_expression ':' statement",
"labeled_statement : DEFAULT ':' statement",
"compound_statement : '{' '}'",
"compound_statement : '{' block_item_list '}'",
"block_item_list : block_item",
"block_item_list : block_item_list block_item",
"block_item : declaration",
"block_item : statement",
"expression_statement : ';'",
"expression_statement : expression ';'",
"selection_statement : IF '(' expression ')' statement",
"selection_statement : IF '(' expression ')' statement ELSE statement",
"selection_statement : SWITCH '(' expression ')' statement",
"iteration_statement : WHILE '(' expression ')' statement",
"iteration_statement : DO statement WHILE '(' expression ')' ';'",
"iteration_statement : FOR '(' ';' ';' ')' statement",
"iteration_statement : FOR '(' ';' ';' expression ')' statement",
"iteration_statement : FOR '(' ';' expression ';' expression ')' statement",
"iteration_statement : FOR '(' expression ';' expression ';' expression ')' statement",
"iteration_statement : FOR '(' expression ';' ';' ')' statement",
"iteration_statement : FOR '(' expression ';' expression ';' ')' statement",
"iteration_statement : FOR '(' ';' expression ';' ')' statement",
"iteration_statement : FOR '(' expression ';' ';' expression ')' statement",
"iteration_statement : FOR '(' declaration ';' ')' statement",
"iteration_statement : FOR '(' declaration ';' expression ')' statement",
"iteration_statement : FOR '(' declaration expression ';' ')' statement",
"iteration_statement : FOR '(' declaration expression ';' expression ')' statement",
"jump_statement : GOTO IDENTIFIER ';'",
"jump_statement : CONTINUE ';'",
"jump_statement : BREAK ';'",
"jump_statement : RETURN ';'",
"jump_statement : RETURN expression ';'",
"translation_unit : external_declaration",
"translation_unit : translation_unit external_declaration",
"external_declaration : function_definition",
"external_declaration : declaration",
"function_definition : declaration_specifiers declarator declaration_list compound_statement",
"function_definition : declaration_specifiers declarator compound_statement",
"declaration_list : declaration",
"declaration_list : declaration_list declaration",
"parallel_function_list : IDENTIFIER",
"parallel_function_list : parallel_function_list ',' IDENTIFIER",
"parallel_function : PARAFUNC",
"boolean_expression : boolean_and_expression",
"boolean_expression : boolean_expression OR_OP boolean_and_expression",
"boolean_and_expression :",
"boolean_and_expression : boolean_primary_expression",
"boolean_and_expression : boolean_and_expression AND_OP boolean_primary_expression",
"boolean_primary_expression : parallel_function",
"boolean_primary_expression : AND_OP parallel_function",
"boolean_primary_expression : OR_OP parallel_function",
"boolean_primary_expression : '(' boolean_expression ')'",
};
#endif
#if YYDEBUG
#include <stdio.h>
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 10000
#define YYMAXDEPTH 10000
#endif
#endif
#define YYINITSTACKSIZE 200
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short *yyss;
short *yysslim;
YYSTYPE *yyvs;
int yystacksize;
#line 655 "c.y"

#include <stdio.h>



extern char yytext[];
extern FILE * yyin;
extern int column;
extern int row;

vector<string> outputvec(string s) {
    vector<string>ret;
    string tmp="";
    for (int i=0;i<s.size();i++) {
        if (s[i]!=' '&&s[i]!='\t') tmp+=s[i];
        else {
             ret.push_back(tmp);
             tmp="";
        }
    }
    if (!tmp.empty()) ret.push_back(tmp);
    return ret;
}
string tra1(string s) {
    for (int i=0;i<=s.size();i++) if (s[i]==',') s[i]=' ';
	vector<string> arraystring=outputvec(s);
	//Parallel<int (int, int)> f2(fff);
    string ret="Parallel<";
    if (mp.find(arraystring[1])!=mp.end()) ret+=mp[arraystring[1]];
	ret+=">";
	for (int i=2;i<arraystring.size();i++) {
        if (i==2) ret+=' ';
        else ret+=',';
        ret+=arraystring[i]+'('+arraystring[1]+')';
    }
	return ret;
}
string tra2(string s) {
	if (s.find('<')==string::npos) return s;
	int a=s.find('<'),b=s.find('>');
	string t1=s.substr(0,a),t2=s.substr(a+1,b-a-1),t3=s.substr(b+1,s.size()-b-1);
	return t1+".waiting("+t2+')'+t3;
}

void yyerror(char *s)
{

  fflush(stdout);

  printf("\nrow:%d column:%d:%s \" %s \"\n", row, column,  s, yytext);

}
int main(int argc, char *argv[])
{
	yyin = fopen(argv[1],"r");
	yyparse();
//	for (int i=0;i<sl.size();i++) cout<<sl[i]<<' ';
	return 1;
}
#line 1362 "y.tab.c"
/* allocate initial stack or double stack size, up to YYMAXDEPTH */
static int yygrowstack()
{
    int newsize, i;
    short *newss;
    YYSTYPE *newvs;

    if ((newsize = yystacksize) == 0)
        newsize = YYINITSTACKSIZE;
    else if (newsize >= YYMAXDEPTH)
        return -1;
    else if ((newsize *= 2) > YYMAXDEPTH)
        newsize = YYMAXDEPTH;
    i = yyssp - yyss;
    newss = yyss ? (short *)realloc(yyss, newsize * sizeof *newss) :
      (short *)malloc(newsize * sizeof *newss);
    if (newss == NULL)
        return -1;
    yyss = newss;
    yyssp = newss + i;
    newvs = yyvs ? (YYSTYPE *)realloc(yyvs, newsize * sizeof *newvs) :
      (YYSTYPE *)malloc(newsize * sizeof *newvs);
    if (newvs == NULL)
        return -1;
    yyvs = newvs;
    yyvsp = newvs + i;
    yystacksize = newsize;
    yysslim = yyss + newsize - 1;
    return 0;
}

#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab

#ifndef YYPARSE_PARAM
#if defined(__cplusplus) || __STDC__
#define YYPARSE_PARAM_ARG void
#define YYPARSE_PARAM_DECL
#else	/* ! ANSI-C/C++ */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif	/* ANSI-C/C++ */
#else	/* YYPARSE_PARAM */
#ifndef YYPARSE_PARAM_TYPE
#define YYPARSE_PARAM_TYPE void *
#endif
#if defined(__cplusplus) || __STDC__
#define YYPARSE_PARAM_ARG YYPARSE_PARAM_TYPE YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else	/* ! ANSI-C/C++ */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL YYPARSE_PARAM_TYPE YYPARSE_PARAM;
#endif	/* ANSI-C/C++ */
#endif	/* ! YYPARSE_PARAM */

int
yyparse (YYPARSE_PARAM_ARG)
    YYPARSE_PARAM_DECL
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register const char *yys;

    if ((yys = getenv("YYDEBUG")))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    if (yyss == NULL && yygrowstack()) goto yyoverflow;
    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if ((yyn = yydefred[yystate])) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yyssp >= yysslim && yygrowstack())
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#if defined(lint) || defined(__GNUC__)
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#if defined(lint) || defined(__GNUC__)
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yysslim && yygrowstack())
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 4:
#line 78 "c.y"
{  }
break;
case 5:
#line 84 "c.y"
{ }
break;
case 6:
#line 85 "c.y"
{ }
break;
case 7:
#line 86 "c.y"
{  }
break;
case 8:
#line 87 "c.y"
{ ;}
break;
case 9:
#line 88 "c.y"
{ ; }
break;
case 10:
#line 89 "c.y"
{ ; }
break;
case 11:
#line 90 "c.y"
{ ; }
break;
case 12:
#line 91 "c.y"
{; }
break;
case 13:
#line 92 "c.y"
{ ; }
break;
case 14:
#line 93 "c.y"
{ ; }
break;
case 15:
#line 94 "c.y"
{cout<<tra2(tmp)<<";";}
break;
case 16:
#line 95 "c.y"
{cout<<tra2(tmp)<<";";}
break;
case 17:
#line 96 "c.y"
{ cout<<tra2(tmp)<<";"; }
break;
case 18:
#line 97 "c.y"
{ cout<<tra2(tmp)<<";"; }
break;
case 19:
#line 103 "c.y"
{ ; }
break;
case 20:
#line 104 "c.y"
{ ; }
break;
case 21:
#line 108 "c.y"
{ ; }
break;
case 22:
#line 109 "c.y"
{ ; }
break;
case 23:
#line 110 "c.y"
{ ; }
break;
case 24:
#line 111 "c.y"
{ ; }
break;
case 25:
#line 112 "c.y"
{ ; }
break;
case 26:
#line 113 "c.y"
{ ; }
break;
case 27:
#line 117 "c.y"
{ ; }
break;
case 28:
#line 118 "c.y"
{ ; }
break;
case 29:
#line 119 "c.y"
{ ; }
break;
case 30:
#line 120 "c.y"
{ ; }
break;
case 31:
#line 121 "c.y"
{ ; }
break;
case 32:
#line 122 "c.y"
{ ; }
break;
case 33:
#line 126 "c.y"
{;}
break;
case 34:
#line 127 "c.y"
{ ; }
break;
case 35:
#line 131 "c.y"
{ ; }
break;
case 36:
#line 132 "c.y"
{ ; }
break;
case 37:
#line 133 "c.y"
{ ; }
break;
case 38:
#line 134 "c.y"
{ ; }
break;
case 39:
#line 139 "c.y"
{ ; }
break;
case 40:
#line 140 "c.y"
{ ; }
break;
case 41:
#line 141 "c.y"
{ ; }
break;
case 42:
#line 145 "c.y"
{ ; }
break;
case 43:
#line 146 "c.y"
{ ; }
break;
case 44:
#line 147 "c.y"
{ ; }
break;
case 45:
#line 153 "c.y"
{; }
break;
case 46:
#line 154 "c.y"
{ ; }
break;
case 47:
#line 155 "c.y"
{ ; }
break;
case 48:
#line 156 "c.y"
{ ; }
break;
case 49:
#line 157 "c.y"
{ ; }
break;
case 50:
#line 163 "c.y"
{ ; }
break;
case 51:
#line 164 "c.y"
{ }
break;
case 52:
#line 165 "c.y"
{ ; }
break;
case 53:
#line 171 "c.y"
{ ; }
break;
case 54:
#line 172 "c.y"
{ ; }
break;
case 55:
#line 177 "c.y"
{ ; }
break;
case 56:
#line 178 "c.y"
{ ; }
break;
case 57:
#line 182 "c.y"
{ ; }
break;
case 58:
#line 183 "c.y"
{ ; }
break;
case 59:
#line 189 "c.y"
{ ; }
break;
case 60:
#line 190 "c.y"
{ ; }
break;
case 61:
#line 194 "c.y"
{ ; }
break;
case 62:
#line 195 "c.y"
{ ; }
break;
case 63:
#line 201 "c.y"
{ ; }
break;
case 64:
#line 202 "c.y"
{ ; }
break;
case 65:
#line 208 "c.y"
{ ; }
break;
case 66:
#line 209 "c.y"
{ ; }
break;
case 67:
#line 214 "c.y"
{ ; }
break;
case 68:
#line 215 "c.y"
{ ; }
break;
case 69:
#line 216 "c.y"
{ ; }
break;
case 70:
#line 217 "c.y"
{ ; }
break;
case 71:
#line 218 "c.y"
{ ; }
break;
case 72:
#line 219 "c.y"
{ ; }
break;
case 73:
#line 220 "c.y"
{ ; }
break;
case 74:
#line 221 "c.y"
{; }
break;
case 75:
#line 222 "c.y"
{ ; }
break;
case 76:
#line 223 "c.y"
{ ; }
break;
case 77:
#line 224 "c.y"
{ ; }
break;
case 78:
#line 228 "c.y"
{ ; }
break;
case 79:
#line 229 "c.y"
{ ; }
break;
case 80:
#line 235 "c.y"
{ ; }
break;
case 81:
#line 241 "c.y"
{ ; }
break;
case 82:
#line 242 "c.y"
{ ; }
break;
case 83:
#line 243 "c.y"
{ 
		int i;
		for (i=sl.size()-1;i>=0;i--) {
			if (sl[i]=="parallel") break;
		}
		for (i=i+2;i<sl.size();i++) {st[level].insert(sl[i]);}
		cout<<tra1(tmp)<<';';
	}
break;
case 84:
#line 254 "c.y"
{ ; }
break;
case 85:
#line 255 "c.y"
{ ; }
break;
case 86:
#line 256 "c.y"
{ ; }
break;
case 87:
#line 257 "c.y"
{; }
break;
case 88:
#line 258 "c.y"
{ ; }
break;
case 89:
#line 259 "c.y"
{ ; }
break;
case 90:
#line 260 "c.y"
{ ;}
break;
case 91:
#line 261 "c.y"
{ ;}
break;
case 92:
#line 266 "c.y"
{ ; }
break;
case 93:
#line 267 "c.y"
{ ; }
break;
case 94:
#line 271 "c.y"
{ ; }
break;
case 95:
#line 272 "c.y"
{ ; }
break;
case 96:
#line 276 "c.y"
{ ; }
break;
case 97:
#line 277 "c.y"
{ ; }
break;
case 98:
#line 278 "c.y"
{ ; }
break;
case 99:
#line 279 "c.y"
{; }
break;
case 100:
#line 280 "c.y"
{ ; }
break;
case 101:
#line 285 "c.y"
{ ; }
break;
case 102:
#line 286 "c.y"
{ ; }
break;
case 103:
#line 287 "c.y"
{ ; }
break;
case 104:
#line 288 "c.y"
{ ; }
break;
case 105:
#line 289 "c.y"
{ ; }
break;
case 106:
#line 290 "c.y"
{ ; }
break;
case 107:
#line 291 "c.y"
{;  }
break;
case 108:
#line 292 "c.y"
{; }
break;
case 109:
#line 293 "c.y"
{; }
break;
case 110:
#line 294 "c.y"
{; }
break;
case 111:
#line 295 "c.y"
{; }
break;
case 112:
#line 296 "c.y"
{ ; }
break;
case 113:
#line 297 "c.y"
{ ; }
break;
case 114:
#line 298 "c.y"
{ ; }
break;
case 115:
#line 299 "c.y"
{ ; }
break;
case 116:
#line 304 "c.y"
{; }
break;
case 117:
#line 305 "c.y"
{ ; }
break;
case 118:
#line 306 "c.y"
{; }
break;
case 119:
#line 311 "c.y"
{ ; }
break;
case 120:
#line 312 "c.y"
{ ; }
break;
case 121:
#line 317 "c.y"
{ ; }
break;
case 122:
#line 318 "c.y"
{ ; }
break;
case 123:
#line 323 "c.y"
{ ; }
break;
case 124:
#line 329 "c.y"
{ ; }
break;
case 125:
#line 330 "c.y"
{ ; }
break;
case 126:
#line 331 "c.y"
{ }
break;
case 127:
#line 332 "c.y"
{ ; }
break;
case 128:
#line 337 "c.y"
{ ; }
break;
case 129:
#line 338 "c.y"
{ ; }
break;
case 130:
#line 343 "c.y"
{  }
break;
case 131:
#line 344 "c.y"
{  }
break;
case 132:
#line 345 "c.y"
{ ; }
break;
case 133:
#line 350 "c.y"
{ ; }
break;
case 134:
#line 351 "c.y"
{ ; }
break;
case 135:
#line 352 "c.y"
{ ; }
break;
case 136:
#line 353 "c.y"
{ ; }
break;
case 137:
#line 354 "c.y"
{ ; }
break;
case 138:
#line 358 "c.y"
{ ; }
break;
case 139:
#line 359 "c.y"
{ ; }
break;
case 140:
#line 363 "c.y"
{ ; }
break;
case 141:
#line 364 "c.y"
{ ; }
break;
case 142:
#line 370 "c.y"
{ ; }
break;
case 143:
#line 371 "c.y"
{ ; }
break;
case 144:
#line 372 "c.y"
{ ; }
break;
case 145:
#line 376 "c.y"
{ ; }
break;
case 146:
#line 381 "c.y"
{ ;}
break;
case 147:
#line 382 "c.y"
{ ; }
break;
case 148:
#line 387 "c.y"
{ ; }
break;
case 149:
#line 388 "c.y"
{ ; }
break;
case 150:
#line 389 "c.y"
{ ;}
break;
case 151:
#line 390 "c.y"
{ ;}
break;
case 152:
#line 391 "c.y"
{ ;}
break;
case 153:
#line 392 "c.y"
{ ;}
break;
case 154:
#line 393 "c.y"
{;}
break;
case 155:
#line 394 "c.y"
{;}
break;
case 156:
#line 395 "c.y"
{ ;}
break;
case 157:
#line 396 "c.y"
{; }
break;
case 158:
#line 397 "c.y"
{;}
break;
case 159:
#line 398 "c.y"
{;}
break;
case 160:
#line 399 "c.y"
{;}
break;
case 161:
#line 400 "c.y"
{;}
break;
case 162:
#line 405 "c.y"
{ ;}
break;
case 163:
#line 406 "c.y"
{ ;}
break;
case 164:
#line 407 "c.y"
{ ;}
break;
case 165:
#line 408 "c.y"
{ ;}
break;
case 166:
#line 412 "c.y"
{ ;}
break;
case 167:
#line 413 "c.y"
{ ;}
break;
case 168:
#line 417 "c.y"
{ ;}
break;
case 169:
#line 418 "c.y"
{ ;}
break;
case 170:
#line 422 "c.y"
{ ;}
break;
case 171:
#line 423 "c.y"
{;}
break;
case 172:
#line 427 "c.y"
{ ;}
break;
case 173:
#line 428 "c.y"
{ ;}
break;
case 174:
#line 429 "c.y"
{ ;}
break;
case 175:
#line 433 "c.y"
{ ; }
break;
case 176:
#line 434 "c.y"
{ ; }
break;
case 177:
#line 439 "c.y"
{ ;}
break;
case 178:
#line 440 "c.y"
{;}
break;
case 179:
#line 444 "c.y"
{ ;}
break;
case 180:
#line 445 "c.y"
{ ;}
break;
case 181:
#line 446 "c.y"
{ ;}
break;
case 182:
#line 450 "c.y"
{;}
break;
case 195:
#line 466 "c.y"
{ ;}
break;
case 196:
#line 470 "c.y"
{ ;}
break;
case 197:
#line 471 "c.y"
{ ;}
break;
case 198:
#line 472 "c.y"
{ ;}
break;
case 199:
#line 476 "c.y"
{ ;}
break;
case 200:
#line 477 "c.y"
{ ;}
break;
case 201:
#line 478 "c.y"
{ ;}
break;
case 202:
#line 482 "c.y"
{ ;}
break;
case 203:
#line 486 "c.y"
{ ;}
break;
case 204:
#line 487 "c.y"
{ ;}
break;
case 205:
#line 491 "c.y"
{ ;}
break;
case 206:
#line 492 "c.y"
{ ;}
break;
case 207:
#line 496 "c.y"
{ ; }
break;
case 208:
#line 497 "c.y"
{ ; }
break;
case 209:
#line 498 "c.y"
{ ; }
break;
case 210:
#line 499 "c.y"
{ ; }
break;
case 211:
#line 500 "c.y"
{; }
break;
case 212:
#line 501 "c.y"
{ ; }
break;
case 213:
#line 505 "c.y"
{ ; }
break;
case 214:
#line 506 "c.y"
{ ; }
break;
case 215:
#line 507 "c.y"
{ ; }
break;
case 216:
#line 511 "c.y"
{ ; }
break;
case 217:
#line 512 "c.y"
{ ; }
break;
case 218:
#line 516 "c.y"
{ ; }
break;
case 219:
#line 517 "c.y"
{ ; }
break;
case 220:
#line 521 "c.y"
{ ; }
break;
case 221:
#line 522 "c.y"
{ ; }
break;
case 222:
#line 526 "c.y"
{ ; }
break;
case 223:
#line 527 "c.y"
{ ; }
break;
case 224:
#line 532 "c.y"
{ ; }
break;
case 225:
#line 533 "c.y"
{ ; }
break;
case 226:
#line 534 "c.y"
{ ; }
break;
case 227:
#line 538 "c.y"
{ ; }
break;
case 228:
#line 539 "c.y"
{ ; }
break;
case 229:
#line 540 "c.y"
{ ; }
break;
case 230:
#line 541 "c.y"
{; }
break;
case 231:
#line 542 "c.y"
{ ; }
break;
case 232:
#line 543 "c.y"
{ ; }
break;
case 233:
#line 544 "c.y"
{ ; }
break;
case 234:
#line 545 "c.y"
{ ; }
break;
case 235:
#line 546 "c.y"
{ ; }
break;
case 236:
#line 547 "c.y"
{ ; }
break;
case 237:
#line 548 "c.y"
{ ; }
break;
case 238:
#line 549 "c.y"
{ ; }
break;
case 239:
#line 550 "c.y"
{; }
break;
case 240:
#line 551 "c.y"
{ ; }
break;
case 241:
#line 555 "c.y"
{ ; }
break;
case 242:
#line 556 "c.y"
{ ; }
break;
case 243:
#line 557 "c.y"
{ ; }
break;
case 244:
#line 558 "c.y"
{ ; }
break;
case 245:
#line 559 "c.y"
{ ; }
break;
case 246:
#line 564 "c.y"
{ ; }
break;
case 247:
#line 565 "c.y"
{ ; }
break;
case 248:
#line 570 "c.y"
{;}
break;
case 249:
#line 571 "c.y"
{;}
break;
case 250:
#line 576 "c.y"
{; }
break;
case 251:
#line 578 "c.y"
{
		/*for (int i=0;i<sp.size();i++) cout<<sp[i];*/
		int temp=0,pos,posbegin;
    for (int i=sp.size()-1;i>=0;i--) {
        if (sp[i]=="}") temp++;
        else if (sp[i]=="{") {
             temp--;
             if (temp==0) {pos=i;break;}
        }
    }
    for (int i=pos-1;i>=0;i--) {
        if (sp[i]=="(") {
            if (i>=2&&(sp[i-2]=="signed"||sp[i-2]=="unsigned")) posbegin=i-2;
            else posbegin=i-1;
            break;
        }
    }
	string toinsert;
	for (int i=posbegin;i<pos;i++) {
		if (sp[i]==")"&&sp[i-1]=="(") toinsert+="void";
		toinsert+=sp[i];
	}
	/*cout<<toinsert;*/


		sp.clear();
		int tem=0,tem2=0,ok=0;
		for (int i=sl.size()-1;i>=0;i--) {
			if (ok==0&&sl[i]=="}") tem--;
			else if (ok==0&&sl[i]=="{") {
				tem++;
				if (tem==0) ok=1;
			}
			
			else if (ok&&sl[i]==")") tem2--;
			else if (ok&&sl[i]=="(") {
				tem2++;
				if (ok&&tem2==0) {
					mp[sl[i-1]]=toinsert;
					break;
				}
			}
		} 
	}
break;
case 252:
#line 625 "c.y"
{ ;}
break;
case 253:
#line 626 "c.y"
{ ;}
break;
case 254:
#line 631 "c.y"
{ ; }
break;
case 255:
#line 632 "c.y"
{ ; }
break;
case 256:
#line 636 "c.y"
{;}
break;
case 257:
#line 640 "c.y"
{ ; }
break;
case 258:
#line 641 "c.y"
{ ; }
break;
case 260:
#line 645 "c.y"
{ ; }
break;
case 261:
#line 646 "c.y"
{ ; }
break;
case 262:
#line 650 "c.y"
{ ; }
break;
case 263:
#line 651 "c.y"
{ ; }
break;
case 264:
#line 652 "c.y"
{ ; }
break;
case 265:
#line 653 "c.y"
{ ; }
break;
#line 2603 "y.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yyssp, yystate);
#endif
    if (yyssp >= yysslim && yygrowstack())
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
